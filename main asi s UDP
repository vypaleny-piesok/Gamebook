import pygame
import sys
import random
import tkinter as tk
from tkinter import messagebox
import json


from network import UDPNetwork

# For testing, set one player as server, one as client
IS_SERVER = False # Set False for client
network = UDPNetwork(is_server=IS_SERVER)

chat_input = ""
chat_log = []
MAX_CHAT_LINES = 6


pygame.init()

# Screen
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Dobrodružstvo Gamebook")

# Fonts
FONT = pygame.font.Font("medieval.ttf", 28)
BIG_FONT = pygame.font.Font("medieval.ttf", 36)

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
LIGHT_GRAY = (220, 220, 220)
DARK_GRAY = (160, 160, 160)
RED = (200, 0, 0)
GREEN = (0, 200, 0)

# Background image and music
background_img = pygame.image.load("background_forest.jpg").convert()
background_img = pygame.transform.scale(background_img, (WIDTH, HEIGHT))

pygame.mixer.music.load("music.ogg")
pygame.mixer.music.play(-1)

# Icons
sword_icon = pygame.image.load("sword.png").convert_alpha()
sword_icon = pygame.transform.scale(sword_icon, (64, 64))
inventory_icon = pygame.image.load("inventory_icon.png").convert_alpha()
inventory_icon = pygame.transform.scale(inventory_icon, (48, 48))
leaf_img = pygame.image.load("leaf.png").convert_alpha()
leaf_img = pygame.transform.scale(leaf_img, (32, 32))

# Player stats
player_health = 100
coins = 0
inventory = ["Meč"]
show_inventory = False

# Falling leaves setup (adjusted for fewer leaves)
leaves = []
for _ in range(random.randint(2, 4)):
    leaf = {
        "x": random.randint(0, WIDTH),
        "y": random.randint(-HEIGHT, 0),
        "speed": random.uniform(0.2, 0.6),
        "img": leaf_img
    }
    leaves.append(leaf)

# Typewriter effect variables
typed_text = ""
last_update_time = 0
text_char_index = 0
TEXT_SPEED = 30  # milliseconds per character

# Story node class
class StoryNode:
    def __init__(self, text, options, is_combat=False, enemy=None, coins=0):
        self.text = text
        self.options = options
        self.is_combat = is_combat
        self.enemy = enemy  # Dict like {"name": "Wolf", "health": 30}
        self.coins = coins  # New attribute to store coin rewards
        self.coins_collected = False


# Define story nodes
nodes = {
    "start": StoryNode(
        "Zobudíš sa v lese, tvoja hlava bolí a nič si nepamätáš. Okolo teba je hustý les a vzduch je chladný. Pripadáš si dezorientovaný a stratený. Zrazu si uvedomíš, že máš v rukách krvavý meč, ale vôbec netušíš, odkiaľ pochádza. Kde si? Čo sa stalo?",
        [
            {"text": "Skúsiť si spomenúť, čo sa stalo", "next": "memory_lost"},
            {"text": "Preskúmať les", "next": "explore_forest"}
        ],
        coins=10  # Give 10 coins for this node
    ),
    "memory_lost": StoryNode(
        "Snažíš sa spomenúť na niečo z minulosti, ale tvoje myšlienky sú roztrieštené. Cítiš len zúfalstvo a chaos. Bolesť v hlave sa zintenzívňuje, ale nedokážeš si vybaviť nič. Srdce ti bije rýchlo. Čo ak si niekto alebo niečo vymazalo tvoje spomienky?",
        [
            {"text": "Pokúsiť sa upokojiť a pokračovať v hľadaní útočišťa", "next": "find_shelter"},
            {"text": "Získať sa na chvíľu a sedieť", "next": "rest_under_tree"}
        ],
        coins = 5
    ),
    "explore_forest": StoryNode(
        "Kráčaš ďalej lesom, ale čím viac sa dostávaš do hlbšieho lesa, tým viac sa cítiš znepokojený. Kde sa nachádzaš? Zrazu počuješ niečo šuchotať v kroví.",
        [
            {"text": "Skontrolovať, čo je v kroví", "next": "check_bush"},
            {"text": "Pokračovať v ceste ďalej", "next": "deeper_forest"}
        ],
        coins = 3
    ),
    "find_shelter": StoryNode(
        "Rozhodneš sa hľadať útočište predtým, než sa zotmie. Po chvíli nájdeš malú jaskyňu, kde sa môžeš skryť. Je tam ticho a bezpečne sa cítiš. Možno tu nájdeš nejaké stopy o tom, čo sa stalo.",
        [
            {"text": "Preskúmať jaskyňu", "next": "cave_exploration"},
            {"text": "Odpočinúť si a pokúsiť sa spomenúť", "next": "rest_under_tree"}
        ]
    ),
    "rest_under_tree": StoryNode(
        "Rozhodneš sa sedieť pod stromom a upokojiť sa. Snažíš sa vyprázdniť svoju myseľ, ale v tvojich myšlienkach stále pretrváva chaos. Zrazu zazrieš niečo pohybujúce sa medzi stromami.",
        [
            {"text": "Skontrolovať, čo sa pohybuje medzi stromami", "next": "forest_figure"},
            {"text": "Pokúsiť sa opäť získať kontrolu nad svojimi myšlienkami", "next": "memory_lost"}
        ]
    ),
    "check_bush": StoryNode(
        "Podídete k krovu a zbadáte malú zvieraciu stopu. Je to divoká zver, ale nezjavuje sa. Možno ste sa na chvíľu stratili v lese, alebo to môže byť niečo nebezpečnejšie.",
        [
            {"text": "Pokračovať v hľadaní zvieraťa", "next": "hunt_animal"},
            {"text": "Vrátiť sa k hľadaniu útočišťa", "next": "find_shelter"}
        ]
    ),
    "deeper_forest": StoryNode(
        "Les sa ešte viac zhusťuje. Vzduch je ťažký a vlhký. Na zemi sa objavuje stopy zvieraťa. Možno sa približuješ k niečomu nebezpečnému.",
        [
            {"text": "Pokúsiť sa sledovať stopy", "next": "follow_tracks"},
            {"text": "Zastaviť a preskúmať okolie", "next": "rest_under_tree"}
        ]
    ),
    "cave_exploration": StoryNode(
        "Jaskyňa je temná a vlhká, ale zdá sa, že tu niekto pred tebou niekedy bol. Nájdeš staré, vyblednuté nápisy na stene, ale nie sú zrozumiteľné.",
        [
            {"text": "Pokúsiť sa opísať nápisy", "next": "explore_forest"},
            {"text": "Opustiť jaskyňu a pokračovať hľadaním", "next": "find_shelter"}
        ]
    ),
    "rest_under_tree": StoryNode(
        "Zrazu sa z lesa vytrhne zviera a rýchlo sa rozbehne k tebe.",
        [
            {"text": "Bojovať", "next": "fight_beast"},
            {"text": "Utiecť", "next": "run_away"}
        ]
    ),
    "forest_figure": StoryNode(
        "Stojíš a sleduješ, čo sa pohybuje medzi stromami. Zrazu zbadáš postavu, ktorá sa zdá byť rovnaká ako ty. Ale je to naozaj ty?",
        [
            {"text": "Pokúsiť sa oslovit postavu", "next": "speak_figure"},
            {"text": "Utiecť pred neznámou postavou", "next": "run_away"}
        ]
    ),
    "speak_figure": StoryNode(
        "Keď sa priblížiš, postava zmizne. Cítiš, že niečo nie je v poriadku.",
        [
            {"text": "Pokračovať v hľadaní útočišťa", "next": "find_shelter"},
            {"text": "Opäť skúsiť sa spomenúť, čo sa stalo", "next": "memory_lost"}
        ]
    ),
    "hunt_animal": StoryNode(
        "Chceš sa pripraviť na lov, ale je to riskantné. Zvieratá sú tu nebezpečné. Po chvíli sa nájdeš v konfrontácii s divokým medveďom.",
        [
            {"text": "Bojovať s medveďom", "next": "fight_bear"},
            {"text": "Utiecť", "next": "run_away"}
        ]
    ),
    "follow_tracks": StoryNode(
        "Sleduješ stopy až k rieke. Rieka je divoká a nebezpečná, ale možno sa ti podarí prejsť.",
        [
            {"text": "Pokúsiť sa prejsť rieku", "next": "cross_river"},
            {"text": "Vrátiť sa späť a preskúmať les", "next": "explore_forest"}
        ]
    ),
    "fight_bear": StoryNode(
    "Boj s medveďom je drsný a vyčerpávajúci. Po tvrdých úderoch medveď ustúpi, ale je to ťažká výhra. Máš veľa rán.",
    [
        {"text": "Pokračovať ďalej", "next": "end"}
    ],
    is_combat=True,  # Nastavené na True, aby sa zapol systém boja
    enemy={"name": "Medveď", "health": 50}  # Definovanie nepriateľa, ktorý bude použitý pri boji
),
    "fight_beast": StoryNode(
        "Bojoval si statočne, ale zviera ťa porazilo. Bolesť je neznesiteľná, a ty padáš na zem.",
        [
            {"text": "Zomrel si", "next": "end"}
        ]
    ),
    "cross_river": StoryNode(
        "Prejdenie rieky bolo ťažké, ale nakoniec sa ti podarilo. Na druhej strane nájdeš niečo neznáme, ale niečo, čo ti môže pomôcť v ceste.",
        [
            {"text": "Preskúmať neznámu oblasť", "next": "unknown_area"},
            {"text": "Pokračovať v ceste", "next": "explore_forest"}
        ]
    ),
    "run_away": StoryNode(
        "Ušiel si do bezpečia, ale si zranený a unavený.",
        [
            {"text": "Pokračovať v ceste", "next": "explore_forest"}
        ]
    ),
    "unknown_area": StoryNode(
        "Dostal si sa do neznámej oblasti. Tu to vyzerá inak. Cítiš, že sa niečo zmenilo.",
        [
            {"text": "Preskúmať oblasť", "next": "explore_forest"},
            {"text": "Pokúsiť sa nájsť pomoc", "next": "find_shelter"}
        ]
    ),
    "end": StoryNode(
        "Tvoje dobrodružstvo pokračuje... až do ďalšieho dňa.",
        []
    )
}



current_node = "start"

# Combat logic variables
in_combat = False
enemy = None
combat_log = []


def save_game():
    game_state = {
        'current_node': current_node,
        'inventory': inventory,
        'health': player_health
    }
    with open("savefile.json", "w") as f:
        json.dump(game_state, f)
    messagebox.showinfo("Game Saved", "Your progress has been saved!")

def load_game():
    global current_node, inventory, player_health, typed_text, text_char_index
    try:
        with open("savefile.json", "r") as f:
            game_state = json.load(f)
            current_node = game_state.get('current_node', 'start')
            inventory = game_state.get('inventory', [])
            player_health = game_state.get('health', 100)

            # Reset typewriter state
            node = nodes[current_node]
            typed_text = ""
            text_char_index = 0
            messagebox.showinfo("Game Loaded", "Your progress has been loaded!")
    except FileNotFoundError:
        messagebox.showwarning("Load Failed", "No saved game found.")


# Draw outlined text
def draw_text(text, x, y, max_width=700):
    words = text.split()
    line = ""
    y_offset = 0
    for word in words:
        if FONT.size(line + word)[0] > max_width:
            draw_outline_text(line.strip(), x, y + y_offset)
            y_offset += 35
            line = ""
        line += word + " "
    draw_outline_text(line.strip(), x, y + y_offset)

def draw_outline_text(text, x, y):
    for dx in [-1, 0, 1]:
        for dy in [-1, 0, 1]:
            if dx != 0 or dy != 0:
                screen.blit(FONT.render(text, True, BLACK), (x + dx, y + dy))
    screen.blit(FONT.render(text, True, WHITE), (x, y))

def draw_inventory():
    if show_inventory:
        inv_x, inv_y = WIDTH - 210, 60
        inv_width, inv_height = 200, 100
        pygame.draw.rect(screen, (30, 30, 30), (inv_x, inv_y, inv_width, inv_height), border_radius=8)
        pygame.draw.rect(screen, WHITE, (inv_x, inv_y, inv_width, inv_height), 2, border_radius=8)

        padding = 10
        icon_size = 40
        spacing = 50
        for idx, item in enumerate(inventory):
            item_x = inv_x + padding + (idx % 4) * spacing
            item_y = inv_y + padding + (idx // 4) * spacing
            if item == "Meč":
                icon_rect = screen.blit(pygame.transform.scale(sword_icon, (icon_size, icon_size)), (item_x, item_y))
                if icon_rect.collidepoint(pygame.mouse.get_pos()):
                    draw_outline_text(item, item_x, item_y + icon_size + 5)

def draw_health():
    pygame.draw.rect(screen, RED, (20, 20, 200, 25))
    pygame.draw.rect(screen, GREEN, (20, 20, max(0, player_health) * 2, 25))
    draw_outline_text(f"Zdravie: {player_health}", 230, 20)

def damage_flash():
    flash_surface = pygame.Surface((WIDTH, HEIGHT))
    flash_surface.set_alpha(120)
    flash_surface.fill((255, 0, 0))
    screen.blit(flash_surface, (0, 0))
    pygame.display.flip()
    pygame.time.delay(150)

def item_flash():
    flash_surface = pygame.Surface((WIDTH, HEIGHT))
    flash_surface.set_alpha(100)
    flash_surface.fill((0, 255, 0))
    screen.blit(flash_surface, (0, 0))
    pygame.display.flip()
    pygame.time.delay(150)

def fade_transition():
    fade = pygame.Surface((WIDTH, HEIGHT))
    fade.fill((0, 0, 0))
    for alpha in range(0, 255, 15):
        fade.set_alpha(alpha)
        screen.blit(fade, (0, 0))
        pygame.display.flip()
        pygame.time.delay(30)

def draw_leaves():
    for leaf in leaves:
        screen.blit(leaf["img"], (leaf["x"], leaf["y"]))
        leaf["y"] += leaf["speed"]
        if leaf["y"] > HEIGHT:
            leaf["y"] = random.randint(-HEIGHT, -20)
            leaf["x"] = random.randint(0, WIDTH)

def go_to_next_node(next_node):
    global current_node, player_coins
    # Get the next node
    current_node = next_node
    node = nodes[current_node]

    # Add coins from the current node
    player_coins += node.coins

    # Your existing logic to handle the transition to the new node, including story text and options.
    print(f"Coins: {player_coins}")  # Display the updated coin count for testing


# Typewriter logic
def update_typed_text(full_text, current_time):
    global typed_text, text_char_index, last_update_time
    if text_char_index < len(full_text):
        if current_time - last_update_time > TEXT_SPEED:
            typed_text += full_text[text_char_index]
            text_char_index += 1
            last_update_time = current_time

root = tk.Tk()
root.withdraw()  # Hides the root window but allows messageboxes

def main():
    global current_node, player_health, show_inventory
    global typed_text, text_char_index
    global chat_input, chat_log, in_combat, enemy, combat_log
    global coins  # Add this line to reference the global coins variable

    clock = pygame.time.Clock()

    while True:
        screen.blit(background_img, (0, 0))
        draw_leaves()

        node = nodes[current_node]

        # Only collect coins if not already collected for this node
        if not node.coins_collected:
            coins += node.coins  # Add coins for this node
            node.coins_collected = True  # Mark coins as collected for this node

        update_typed_text(node.text, pygame.time.get_ticks())
        draw_text(typed_text, 20, 80)
        draw_health()
        draw_inventory()

        # Draw chat box
        pygame.draw.rect(screen, (50, 50, 50), (10, HEIGHT - 170, 780, 160))
        for i, msg in enumerate(chat_log[-MAX_CHAT_LINES:]):
            draw_outline_text(msg, 20, HEIGHT - 160 + i * 25)

        # Draw chat input
        pygame.draw.rect(screen, WHITE, (10, HEIGHT - 30, 780, 25))
        draw_outline_text("> " + chat_input, 15, HEIGHT - 28)

        # Draw the coins at the top-left of the screen
        draw_outline_text(f"Coins: {coins}", 600, 20)

        mouse = pygame.mouse.get_pos()
        click = False
        # Save button (draw it)
        save_button_rect = pygame.Rect(WIDTH - 150, HEIGHT - 50, 120, 35)
        pygame.draw.rect(screen, DARK_GRAY if save_button_rect.collidepoint(mouse) else LIGHT_GRAY, save_button_rect,
                         border_radius=8)
        draw_outline_text("💾 Uložiť", save_button_rect.x + 10, save_button_rect.y + 5)
        load_button_rect = pygame.Rect(WIDTH - 280, HEIGHT - 50, 120, 35)
        pygame.draw.rect(screen, DARK_GRAY if load_button_rect.collidepoint(mouse) else LIGHT_GRAY, load_button_rect,
                         border_radius=8)
        draw_outline_text("📂 Načítať", load_button_rect.x + 10, load_button_rect.y + 5)

        # Receive chat or game state
        for addr, msg in network.get_messages():
            if msg.startswith("chat:"):
                chat_log.append("Them: " + msg[5:])

        for event in pygame.event.get():
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    if chat_input.strip():
                        chat_log.append("You: " + chat_input)
                        network.send("chat:" + chat_input)
                        chat_input = ""
                elif event.key == pygame.K_BACKSPACE:
                    chat_input = chat_input[:-1]
                else:
                    chat_input += event.unicode

            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                click = True

                node = nodes[current_node]
                # Instantly reveal all text (skip typewriter effect)
                typed_text = node.text
                text_char_index = len(node.text)

                # Toggle inventory if icon is clicked
                if inventory_icon_rect.collidepoint(mouse):
                    show_inventory = not show_inventory
                if save_button_rect.collidepoint(mouse):
                    save_game()
                if load_button_rect.collidepoint(mouse):
                    load_game()

        # Inventory icon
        inventory_icon_rect = screen.blit(inventory_icon, (WIDTH - 60, 30))

        if node.is_combat:
            in_combat = True
            if enemy is None:
                enemy = dict(node.enemy)  # Copy the enemy
                combat_log = []

            # Display enemy and combat log
            draw_outline_text(f"{enemy['name']} - HP: {enemy['health']}", 50, 260)
            for i, log in enumerate(combat_log[-3:]):
                draw_outline_text(log, 50, 290 + i * 25)

            # Combat options
            combat_choices = [
                {"text": "Útok", "action": "attack"},
                {"text": "Útek", "action": "flee"},
                {"text": "Špeciálny útok", "action": "special"}
            ]
            for i, option in enumerate(combat_choices):
                btn_rect = pygame.Rect(50, 400 + i * 50, 700, 45)
                color = DARK_GRAY if btn_rect.collidepoint(mouse) else LIGHT_GRAY
                pygame.draw.rect(screen, color, btn_rect, border_radius=8)
                pygame.draw.rect(screen, BLACK, btn_rect, 2, border_radius=8)
                draw_outline_text(option["text"], btn_rect.x + 10, btn_rect.y + 10)

                if btn_rect.collidepoint(mouse) and click:
                    result_text = ""
                    if option["action"] == "attack":
                        dmg = random.randint(5, 15)
                        enemy["health"] -= dmg
                        result_text = f"Zasiahol si nepriateľa za {dmg} HP."
                    elif option["action"] == "flee":
                        player_health -= 10
                        result_text = "Utiekol si, ale si zranený za 10 HP."
                        current_node = "run_away"
                        fade_transition()
                        typed_text = ""
                        text_char_index = 0
                        enemy = None
                        in_combat = False
                        break
                    elif option["action"] == "special":
                        if random.random() < 0.3:  # 30% chance
                            dmg = random.randint(20, 30)
                            enemy["health"] -= dmg
                            result_text = f"Špeciálny útok uspel! {dmg} HP!"
                        else:
                            player_health -= 5
                            result_text = "Špeciálny útok zlyhal. Stratil si 5 HP."

                    # Enemy attacks back if alive
                    if enemy["health"] > 0 and option["action"] != "flee":
                        enemy_dmg = random.randint(5, 12)
                        player_health -= enemy_dmg
                        result_text += f" {enemy['name']} zaútočil za {enemy_dmg} HP."

                    combat_log.append(result_text)

                    # Check if enemy is dead
                    if enemy["health"] <= 0:
                        current_node = "end"
                        fade_transition()
                        typed_text = ""
                        text_char_index = 0
                        enemy = None
                        in_combat = False
                        break

        # Draw normal story options
        if text_char_index >= len(node.text) and not node.is_combat:
            for i, option in enumerate(node.options):
                btn_rect = pygame.Rect(50, 300 + i * 60, 700, 45)
                color = DARK_GRAY if btn_rect.collidepoint(mouse) else LIGHT_GRAY
                pygame.draw.rect(screen, color, btn_rect, border_radius=8)
                pygame.draw.rect(screen, BLACK, btn_rect, 2, border_radius=8)
                draw_outline_text(option["text"], btn_rect.x + 10, btn_rect.y + 10)

                if btn_rect.collidepoint(mouse) and click:
                    if "health_change" in option:
                        change = option["health_change"]
                        if change < 0:
                            damage_flash()
                        player_health += change
                    if "item" in option:
                        inventory.append(option["item"])
                        item_flash()

                    fade_transition()
                    current_node = option["next"]

                    # Reset typewriter
                    typed_text = ""
                    text_char_index = 0
                    break

        pygame.display.flip()
        clock.tick(60)

main()
